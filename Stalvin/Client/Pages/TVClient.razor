@page "/TVClient"
@using System.Timers
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IAsyncDisposable

<div style="text-align:center;">
    <PageTitle>Remaining Time</PageTitle>
    
    @if (sambucaAlarm) {
        <h1>SAMBUCA ALARM!!!1!1!!!</h1>
        <audio autoplay src="/sounds/sambucaAlarm.mp3"/>        
    } 
    else {
        <h1 role="status">remaining time: @String.Format(@"{0:mm\:ss\.ff}", startTime)</h1>
    }
</div>
 @if (playSound == "correct") {
     <audio autoplay src="/sounds/correctAnswer.mp3" />
 } 
 else if (playSound == "wrong") {
    <audio autoplay src="/sounds/wrongAnswer.mp3" />
 }
 else {

 }

@code {
    private TimeSpan startTime;
    private System.Timers.Timer aTimer = new System.Timers.Timer(10);
    private System.Timers.Timer sambucaTimer = new System.Timers.Timer(17*1000*60);
    private System.Timers.Timer endSambucaTimer = new System.Timers.Timer(20 * 1000);
    private System.Timers.Timer endPlaySoundTimer = new System.Timers.Timer(2 * 1000);
    private HubConnection? hubConnection;
    private bool sambucaAlarm = false;
    private string playSound = "";
    // Hook up the Elapsed event for the timer.

    public void PlaySound(string s) {
        playSound = s;
        endPlaySoundTimer.Enabled = true;
        endPlaySoundTimer.Start();
        this.StateHasChanged();
    }

    private void StartTimer()
    {
        aTimer.Elapsed += OnTimedEvent;
        aTimer.AutoReset = true;
        aTimer.Enabled = true;

        sambucaTimer.Elapsed += OnSambucaStartEvent;
        sambucaTimer.AutoReset = true;
        sambucaTimer.Enabled = true;

        endSambucaTimer.Elapsed += OnEndPlaySound;
        endPlaySoundTimer.AutoReset = false;
    }

    public async void SubtractTime(int minutes, int seconds) {        
        startTime = startTime.Subtract(new TimeSpan(0, 0, minutes, seconds, 0));

        int gameDuration = 0;
        if (await localStorage.ContainKeyAsync("gameDuration"))
        {
            string durationString = await localStorage.GetItemAsStringAsync("gameDuration");
            gameDuration = Convert.ToInt32(durationString);
        }
        else
        {
            gameDuration = 3600;
        }

        gameDuration -= (minutes * 60) + seconds;
        await localStorage.SetItemAsStringAsync("gameDuration", gameDuration.ToString());
    }

    private void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        startTime = startTime.Subtract(new TimeSpan(0, 0, 0, 0, 10));

        this.StateHasChanged();
    }

    private void OnSambucaStartEvent(Object? source, ElapsedEventArgs e)
    {
        sambucaAlarm = true;
        sambucaTimer.Elapsed += OnSambucaEndEvent;
        sambucaTimer.AutoReset = false;
        sambucaTimer.Enabled = true;
        this.StateHasChanged();
    }

    private void OnSambucaEndEvent(Object? source, ElapsedEventArgs e)
    {
        sambucaAlarm = false;
        this.StateHasChanged();
    }

    private void OnEndPlaySound(Object? source, ElapsedEventArgs e) {
        playSound = "";
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await CalcStartTime();
        StartTimer();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/logincontroller"))
            .Build();
        hubConnection.On<string>("ReceiveMessage", (user) =>
       {
           var encodedMsg = $"{user}";
           StateHasChanged();
       });
        await hubConnection.StartAsync();

    }
    private async Task CalcStartTime() {
        // Get the start time
        // add 60 minutes to get the supposed end time
        // then subtract the current time from the end time
        // to get the remaining time
        string startTimeString = await localStorage.GetItemAsStringAsync("Start time");

        int gameDuration = 0;
        if (await localStorage.ContainKeyAsync("gameDuration")){
            string durationString = await localStorage.GetItemAsStringAsync("gameDuration");
            gameDuration = Convert.ToInt32(durationString);
        } 
        else {
            gameDuration = 3600;
        }

        long endTimeEpoch = Convert.ToInt64(startTimeString) + gameDuration;
        long currentTimeEpoch = DateTimeOffset.Now.ToUnixTimeSeconds();
        startTime = new TimeSpan(0, 0, (int)(endTimeEpoch - currentTimeEpoch));
    }
    public bool IsConnected =>
       hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
