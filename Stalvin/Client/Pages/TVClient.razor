@page "/TVClient"
@using System.Timers
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IAsyncDisposable

@if (showVideo == false) {
    <div style="text-align:center; margin-top:50px;">
        <PageTitle>Remaining Time</PageTitle>

        @if (sambucaAlarm)
        {
            <h1>SAMBUCA ALARM!!!1!1!!!</h1>
            <audio autoplay src="/sounds/sambucaAlarm.mp3" />
        }
        else
        {
            <h1 role="status">remaining time: @String.Format(@"{0:mm\:ss\.ff}", startTime)</h1>
            @if (showLabelIndex < 3)
            {
                <div style="width:200px; position:fixed; bottom:100px; right:50px; text-align:left;">
                    <label>In case you run out of time, you can request for more time. The max amount of time is 15 minutes.</label>
                    <button @onclick="AskForTime" class="btn btn-primary">Ask for extra time.</button>
                </div>
            }
        }
    </div>
    @if (showLabel)
    {
        <div class="card" style="position:fixed; width:200px; left: 50%; top: 50%; transform: translate(-50%, -50%);">
            <div class="card-body">
                @if (showLabelIndex == 0)
                {
                    <label>We will give Stalvin a little bit of antidote, which will give you 5 extra minutes. IF someone will chug a beer right now.</label>
                }
                @if (showLabelIndex == 1)
                {
                    <label>We will give Stalvin a little bit of antidote, which will give you 5 extra minutes. IF someone will chug a beer right now.</label>
                }
                @if (showLabelIndex == 2)
                {
                    <label>We will give Stalvin a little bit of antidote, which will give you 5 extra minutes. IF someone will chug a beer right now.</label>
                }
                @if (showLabelIndex == 3)
                {
                    <label>NO MORE EXTRA TIME!</label>
                }
                <button class="btn btn-primary" @onclick="HideCard">close</button>
            </div>
        </div>
    }

    @if (playSound == "correct")
    {
        <audio autoplay src="/sounds/correctAnswer.mp3" />
    }
    else if (playSound == "wrong")
    {
        <audio autoplay src="/sounds/wrongAnswer.mp3" />
    }
    else
    {

    }
}
else {
    <iframe width="560" height="315" src="https://www.youtube.com/embed/ZDUdwP9kK80" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
}


@code {
    private TimeSpan startTime;
    private System.Timers.Timer aTimer = new System.Timers.Timer(10);
    private System.Timers.Timer sambucaTimer = new System.Timers.Timer(17*1000*60);
    private System.Timers.Timer endSambucaTimer = new System.Timers.Timer(20 * 1000);
    private System.Timers.Timer endPlaySoundTimer = new System.Timers.Timer(2 * 1000);
    private HubConnection? hubConnection;
    private bool sambucaAlarm = false;
    private string playSound = "";
    private bool isGameRunning = false;
    private bool showLabel = false;
    private int showLabelIndex = 0;
    private bool showVideo = false;
    // Hook up the Elapsed event for the timer.

    public void PlaySound(string s) {
        playSound = s;
        endPlaySoundTimer.Enabled = true;
        endPlaySoundTimer.Start();
        this.StateHasChanged();
    }

    private void StartTimer()
    {
        isGameRunning = true;
        aTimer.Elapsed += OnTimedEvent;
        aTimer.AutoReset = true;
        aTimer.Enabled = true;

        sambucaTimer.Elapsed += OnSambucaStartEvent;
        sambucaTimer.AutoReset = true;
        sambucaTimer.Enabled = true;

        endSambucaTimer.Elapsed += OnEndPlaySound;
        endPlaySoundTimer.AutoReset = false;
    }

    public async void SubtractTime(int minutes, int seconds) {        
        startTime = startTime.Subtract(new TimeSpan(0, 0, minutes, seconds, 0));

        int gameDuration = 0;
        if (await localStorage.ContainKeyAsync("gameDuration"))
        {
            string durationString = await localStorage.GetItemAsStringAsync("gameDuration");
            gameDuration = Convert.ToInt32(durationString);
        }
        else
        {
            gameDuration = 3600;
        }

        gameDuration -= (minutes * 60) + seconds;
        await localStorage.SetItemAsStringAsync("gameDuration", gameDuration.ToString());
    }

    private void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        if (showVideo == false) {
            if (isGameRunning)
                startTime = startTime.Subtract(new TimeSpan(0, 0, 0, 0, 10));
        }       

        if (startTime == new TimeSpan(0,0,0,0,0)){
            showVideo = true;
        }
        this.StateHasChanged();
    }

    private void OnSambucaStartEvent(Object? source, ElapsedEventArgs e)
    {
        sambucaAlarm = true;
        sambucaTimer.Elapsed += OnSambucaEndEvent;
        sambucaTimer.AutoReset = false;
        sambucaTimer.Enabled = true;
        this.StateHasChanged();
    }

    private void OnSambucaEndEvent(Object? source, ElapsedEventArgs e)
    {
        sambucaAlarm = false;
        this.StateHasChanged();
    }

    private void OnEndPlaySound(Object? source, ElapsedEventArgs e) {
        playSound = "";
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await CalcStartTime();
        StartTimer();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/logincontroller"))
            .Build();
        hubConnection.On<string>("ReceiveMessage", (user) =>
       {
           var encodedMsg = $"{user}";
           StateHasChanged();
       });
        hubConnection.On<int>("AddTimeMessage", time =>
        {
            SubtractTime(-time, 0);
        });
        hubConnection.On<bool>("IsGameRunningEvent", isRunning =>
        {
            isGameRunning = isRunning;
        });
        hubConnection.On<int>("SetLabelMessage", index =>
        {
            showLabelIndex = index;
        });
        await hubConnection.StartAsync();

    }
    private async Task CalcStartTime() {
        // Get the start time
        // add 60 minutes to get the supposed end time
        // then subtract the current time from the end time
        // to get the remaining time
        string startTimeString = await localStorage.GetItemAsStringAsync("Start time");

        int gameDuration = 0;
        if (await localStorage.ContainKeyAsync("gameDuration")){
            string durationString = await localStorage.GetItemAsStringAsync("gameDuration");
            gameDuration = Convert.ToInt32(durationString);
        } 
        else {
            gameDuration = 3600;
        }

        long endTimeEpoch = Convert.ToInt64(startTimeString) + gameDuration;
        long currentTimeEpoch = DateTimeOffset.Now.ToUnixTimeSeconds();
        startTime = new TimeSpan(0, 0, (int)(endTimeEpoch - currentTimeEpoch));
    }

    private void AskForTime(){
        if (showLabelIndex < 3) {
            showLabel = true;            
            StateHasChanged();
        }
    }

    private void HideCard() {
        showLabel = false;
        StateHasChanged();
    }
    public bool IsConnected =>
       hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
