@page "/game1Client"
@using Microsoft.AspNetCore.SignalR.Client
@using models
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div style="text-align:center">
  @if (nextGame == false) {
        @if (gameStarted)
        {
            <h3>Quiz!</h3>

            @if (currentQuestion.Question != "")
            {
                <h4>@currentQuestion.Question</h4>
                @if (currentQuestion.Answers.Count() > 0)
                {
                    @foreach (string s in currentQuestion.Answers)
                    {
                        <div class="card" style="width: 25rem">
                            <button class="btn btn-primary" @onclick="() => SendMultipleChoiceAnswer(s)">@s</button>
                        </div>
                    }
                }
                else
                {
                    <input type="text" @bind="textAnswer" />
                    <button class="btn btn-primary" @onclick="SendTextAnswer">send</button>
                }
            }
        }
        else
        {
            <h1 style="text-align:center;">Waiting for game to start</h1>
        }

        @if (showExplanation)
        {
            <p style="color:#353535;">Try to guess the correct answer. The answer is capital insensitive. For every wrong answer theres a penalty of 5 minutes.'</p>
        }
  }   

    @if (nextGame) {
        <button @onclick="NextPage" class="btn btn-primary">Next page</button>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private QuestionModel currentQuestion = new QuestionModel();
    private string thisUser = "";
    private string textAnswer = "";
    private bool gameStarted = false;
    private bool showExplanation = true;
    private bool nextGame = false;
    protected override async Task OnInitializedAsync()
    {
        thisUser = await localStorage.GetItemAsStringAsync("User");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/logincontroller"))
            .Build();

        hubConnection.On<string, string, List<string>>("Question", async (user, question, answers) =>
       {
           gameStarted = true;
           var currentUser = await localStorage.GetItemAsStringAsync("User");

           if (user == currentUser)
           {
               showExplanation = false;
               currentQuestion.Question = question;
               if (answers.Count > 0)
               {
                   currentQuestion.Answers = answers;
               }
               else
               {
                   currentQuestion.Answers.Clear();
               }
           }
           else
           {
               showExplanation = true;
               currentQuestion.Question = "";
           }

           StateHasChanged();
       });
        hubConnection.On<string>("NextPageMessage", test => {
            nextGame = true;
        });
        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task SendMultipleChoiceAnswer(string answer)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendAnswer", answer);
        }
    }

    private async Task SendTextAnswer()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendAnswer", textAnswer);
        }
    }

    private void NextPage()
    {
        Navigation.NavigateTo("/game2Client");
    }
}
