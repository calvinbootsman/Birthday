@page "/game1TV"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@using models
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    body {
        background: @backgroundColor;
    }
</style>
<TVClient @ref="client" />
<div style="text-align:center;">
    <h1>Quiz</h1>
    @if (question != null)
    {
        <h2>@question.Question;</h2>
        <h4>question @answeredQuestions/@totalQuestion</h4>
    }
</div>
@if (quizDone)
{
    <button @onclick="NextPage" class="btn btn-primary">Next page</button>
}
@code {
    private List<string> users = new List<string>();
    private HubConnection? hubConnection;
    private List<QuestionModel> questions = QuestionModel.GetRandomQuestions();
    private int totalQuestion = QuestionModel.GetRandomQuestions().Count();
    private int answeredQuestions = 0;
    private string backgroundColor = "white";
    QuestionModel? question;
    TVClient? client = new TVClient();
    private Random rnd = new Random();
    private bool quizDone = false;

    public void subtracttime()
    {
        if (client is not null)
            client.SubtractTime(5, 0);
    }

    protected override async Task OnInitializedAsync()
    {
        await InitUsers();
        totalQuestion = users.Count * 3;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/logincontroller"))
            .Build();
        hubConnection.On<string>("Answer", async (answer) =>
       {
           if (question != null)
           {
               if (question.Answer.ToUpper() == answer.ToUpper())
               {
                   if (client is not null)
                        client.PlaySound("correct");
                   AnimateBackground("linear-gradient(180deg, rgba(105,187,88,1) 0%, rgba(139,255,115,1) 100%);");
               }
               else
               {
                   if (client is not null)
                       client.PlaySound("wrong");
                   AnimateBackground("linear-gradient(180deg, rgba(187,88,88,1) 0%, rgba(255,115,115,1) 100%);");

                   if (client is not null)
                   {
                       client.SubtractTime(5, 0);
                   }
               }
           }

           answeredQuestions++;
           await NextQuestion();
           StateHasChanged();
       });
        await hubConnection.StartAsync();
        await NextQuestion();
    }

    private async Task InitUsers()
    {
        var keys = await localStorage.KeysAsync();
        users.Clear();
        foreach (string s in keys)
        {
            var value = await localStorage.GetItemAsStringAsync(s);
            if (value == "added")
            {
                var quizUser = s + 'q';
                users.Add(quizUser);
                await localStorage.SetItemAsStringAsync(quizUser, "0");
            }
        }
    }

    private async Task NextQuestion()
    {
        question = questions.FirstOrDefault();
        if (question != null)
        {
            questions.RemoveAt(0);
            string user = await GetRandomUser();
            user = user.Remove(user.Length - 1);
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendQuestion", user, question.Question, question.Answers);
            }
        }
        else
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("GoToNextPage");
            }
            quizDone = true;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task<string> GetRandomUser()
    {
        if (users.Count > 0)
        {
            int index = rnd.Next(users.Count);
            var user = users[index];
            var count = await localStorage.GetItemAsStringAsync(user);
            while (count is "3")
            {
                users.RemoveAt(index);
                if (users.Count > 0)
                {
                    index = rnd.Next(users.Count);
                    user = users[index];
                    count = await localStorage.GetItemAsStringAsync(user);
                }
                else
                {
                    quizDone = true;
                    break;
                }
            }
            int countint = Convert.ToInt32(count);
            countint++;
            await localStorage.SetItemAsStringAsync(user, countint.ToString());
            return user;
        }
        else
        {
            quizDone = true;
        }
        return "";
    }

    private void AnimateBackground(string color)
    {
        System.Timers.Timer t = new System.Timers.Timer();
        t.Elapsed += (sender, args) =>
        {
            backgroundColor = "white";
            t.Enabled = false;
            this.StateHasChanged();
        };

        t.Interval = 20000;
        t.AutoReset = false;
        t.Enabled = true;
        backgroundColor = color;
    }

    private void NextPage()
    {       
        Navigation.NavigateTo("/game2TV");
    }
}
