@page "/game3TV"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    body {
        background: @backgroundColor;
    }
</style>
<TVClient @ref="client" />
<h3>SecretCodeTV</h3>
<h3>Please help Stalvin...</h3>
@code {
    private System.Timers.Timer newLetterTimer = new System.Timers.Timer(2000);
    private HubConnection? hubConnection;
    private string backgroundColor = "white";
    private string hint = "MDYyMjUxMzY0NQ==";
    private int hintIndex = 0;
    private string realAnswer = "yolo";
    private List<string> users = new List<string>();
    private Random rnd = new Random();
    private string answerUser = "";
    TVClient? client = new TVClient();

    protected override async Task OnInitializedAsync()
    {
        StartTimer();

        hubConnection = new HubConnectionBuilder()
             .WithUrl(Navigation.ToAbsoluteUri("/logincontroller"))
             .Build();
        hubConnection.On<string>("Answer", async (answer) =>
        {
            // correct answer
            if (realAnswer == answer)
            {
                AnimateBackground("linear-gradient(180deg, rgba(105,187,88,1) 0%, rgba(139,255,115,1) 100%);");
                Navigation.NavigateTo("/game4TV");
                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("GoToNextPage");
                }
            }
            // incorrect answer
            else
            {
                if (client is not null)
                {
                    client.SubtractTime(5, 0);
                }
                AnimateBackground("linear-gradient(180deg, rgba(187,88,88,1) 0%, rgba(255,115,115,1) 100%);");
            }
            this.StateHasChanged();
        });
        await hubConnection.StartAsync();
        await InitUsers();
    }

    private void StartTimer()
    {
        newLetterTimer.Elapsed += OnTimedEvent;
        newLetterTimer.AutoReset = true;
        newLetterTimer.Enabled = true;
    }

    private async Task InitUsers()
    {
        var keys = await localStorage.KeysAsync();
        users.Clear();
        int index = 0;
        foreach (string s in keys)
        {
            var value = await localStorage.GetItemAsStringAsync(s);
            if (value == "added")
            {
                users.Add(s);
            }

            index++;
        }
        if (users.Count > 1) {
            int idx = rnd.Next(users.Count());
            answerUser = users[idx];
            users.RemoveAt(idx);
        }
    }

    private async void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        if (hubConnection is not null) {
            await hubConnection.SendAsync("NextCharacter", users[rnd.Next(users.Count())], hint[hintIndex]);
            await hubConnection.SendAsync("SecretAssignRole", answerUser);
            
        }

        hintIndex++;
        if (hintIndex == hint.Length){
            hintIndex = 0;
        }
    }

    private void AnimateBackground(string color)
    {
        System.Timers.Timer t = new System.Timers.Timer();
        t.Elapsed += (sender, args) =>
        {
            backgroundColor = "white";
            t.Enabled = false;
            this.StateHasChanged();
        };

        t.Interval = 2000;
        t.AutoReset = false;
        t.Enabled = true;
        backgroundColor = color;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
